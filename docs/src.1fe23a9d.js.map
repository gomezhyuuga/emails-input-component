{"version":3,"sources":["src/utils/index.ts","src/EmailBlock.ts","src/EmailsInput.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.1fe23a9d.js","sourceRoot":"..","sourcesContent":["// RegEx taken from https://emailregex.com/\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n/**\n * Validates a given string as email using a RegExp.\n *\n * RegExp used: https://emailregex.com/\n * @param {string} email - Email to validate.\n * @returns {boolean} - `true` if is a valid email, `false` otherwise.\n */\nexport function isValidEmail(email: string): boolean {\n  return EMAIL_REGEX.test(email);\n}\n\n/**\n * Given a string contain email addresses, returns an array of strings of emails.\n * @param {string} text - Parses a string extracting emails separated by commas `,`.\n * @returns {string[]} emails - List of emails (strings) identified in the input.\n */\nexport function parsePastedText(text: string): string[] {\n  const _text = text.trim();\n  if (_text.length === 0) return [];\n\n  const split = _text.split(',');\n  return split.map(email => email.trim()).filter(email => email.length > 0);\n}\n\n/** @internal */\nfunction makeid(length: number) {\n  let result = '';\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\n/**\n * Generates a random email address.\n * Utility taken from:\n * https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n */\nexport function generateRandomEmail() {\n  return `${makeid(6)}@miro.com`;\n}\n","import { isValidEmail } from './utils';\nimport EmailsInput from './EmailsInput';\n\nexport const DEFAULT_OPTIONS = {\n  componentClass: 'EmailBlock',\n  emailContentClass: 'EmailBlock__Content',\n  invalidEmailClass: 'EmailBlock--invalid',\n  removeButtonClass: 'EmailBlock__RemoveBtn',\n  componentTag: 'div',\n};\n\nexport type EmailBlockOptions = Partial<typeof DEFAULT_OPTIONS> & {\n  onRemove?: () => void;\n};\n\nexport default class EmailBlock {\n  public wrapper: HTMLElement;\n  public email: string;\n  public emailContentNode: HTMLElement;\n  public closeButton: HTMLElement;\n  private parentInput: EmailsInput;\n  private options: typeof DEFAULT_OPTIONS;\n\n  public onRemove?: () => void;\n\n  constructor(\n    email: string,\n    parentInput: EmailsInput,\n    options?: EmailBlockOptions\n  ) {\n    this.email = email;\n    this.options = { ...DEFAULT_OPTIONS, ...options };\n    this.parentInput = parentInput;\n    this.onRemove = options?.onRemove;\n\n    this.wrapper = document.createElement(this.options.componentTag);\n    this.wrapper.classList.add(this.options.componentClass);\n\n    this.emailContentNode = document.createElement('span');\n    this.emailContentNode.classList.add(this.options.emailContentClass);\n    this.emailContentNode.textContent = this.email;\n\n    this.closeButton = document.createElement('span');\n    this.closeButton.setAttribute(\n      'data-testid',\n      this.options.removeButtonClass\n    );\n    this.closeButton.classList.add(this.options.removeButtonClass);\n    this.closeButton.textContent = 'x';\n    this.closeButton.addEventListener('click', _event => {\n      this._onRemove();\n    });\n\n    this.wrapper.appendChild(this.emailContentNode);\n    this.wrapper.appendChild(this.closeButton);\n\n    this.validate();\n  }\n\n  public validate(): boolean {\n    const _isValid = this.isValid();\n    if (_isValid) this.wrapper.classList.remove(this.options.invalidEmailClass);\n    else this.wrapper.classList.add(this.options.invalidEmailClass);\n\n    return _isValid;\n  }\n\n  public isValid(): boolean {\n    return isValidEmail(this.email);\n  }\n\n  /** @internal */\n  private _onRemove() {\n    if (this.onRemove) this.onRemove();\n\n    this.parentInput.removeEmailBlock(this);\n  }\n}\n","import EmailBlock from './EmailBlock';\nimport { parsePastedText } from './utils';\n\nexport const DEFAULT_OPTIONS = {\n  initialEmails: [] as string[],\n  // Optionals\n  componentClass: 'EmailsInput',\n  emailInputClass: 'EmailsInput__NewEmailInput',\n  placeholder: 'add more people...',\n};\n\n/**\n * v0.0.1 of Public API\n */\ninterface PublicAPI {\n  /**\n   * Returns the emails in the input.\n   * @returns {string[]} Current list of emails in the input.\n   */\n  getEmails(): string[];\n  /**\n   * Replaces the current list of emails for new ones.\n   *\n   * @param {string[]} emails - List of emails as strings.\n   */\n  setEmails(emails: string[]): void;\n  /**\n   * Adds a new email to the input.\n   *\n   * If the email is invalid it adds the invalid CSS class.\n   * @param {string} email - Email to add to the input.\n   */\n  addEmail(email: string): void;\n  /**\n   * Same as `addEmail()` but as a batch.\n   * @param {string[]} emails - List of emails to add.\n   */\n  addEmails(emails: string[]): void;\n  /**\n   * Removes the FIRST occurence of `email` in the input.\n   *\n   * If the email is not present, nothing happens.\n   * @param {string} email - Email supposed to be in the list.\n   */\n  removeEmail(email: string): void;\n  /**\n   * Removes the email at the specified `position`.\n   *\n   * @throws If `position` is invalid, i.e. is out of bounds of the current emails list, then it throws an exception.\n   * @param {number} position - zero-based position of the email to remove.\n   */\n  removeEmailAt(position: number): void;\n  /**\n   * Private fn, removes the EmailBlock passed as argument.\n   * @param {EmailBlock} emailBlock - EmailBlock instance to remove.\n   */\n  removeEmailBlock(emailBlock: EmailBlock): void;\n  /**\n   * Function to be called if:\n   *\n   * - new email is added\n   * - replacing all emails is called\n   * - email is removed\n   */\n  onChange?: (newEmails: string[]) => void;\n}\n\ntype EmailsInputOptions = Partial<typeof DEFAULT_OPTIONS> & {\n  onChange?: PublicAPI['onChange'];\n};\n\nconst _ENTER_KEY = 13;\nconst _COMMA_KEY = 188;\n\nexport default class EmailsInput implements PublicAPI {\n  options: typeof DEFAULT_OPTIONS;\n  emailBlocks: EmailBlock[];\n  onChange?: (newEmails: string[]) => void;\n  wrapper: HTMLElement;\n  inputNode: HTMLInputElement;\n\n  constructor(inputContainerNode: HTMLElement, options?: EmailsInputOptions) {\n    this.options = { ...DEFAULT_OPTIONS, ...options };\n    this.emailBlocks =\n      this.options.initialEmails?.map(\n        emailStr => new EmailBlock(emailStr, this)\n      ) || [];\n\n    this.wrapper = inputContainerNode;\n    this.wrapper.classList.add(this.options.componentClass);\n\n    this.onChange = options?.onChange;\n\n    this.inputNode = document.createElement('input');\n    this.inputNode.classList.add(this.options.emailInputClass);\n    this.inputNode.setAttribute('data-testid', this.options.emailInputClass);\n    this.inputNode.setAttribute('placeholder', this.options.placeholder);\n    // Remove obstrusive browser completion\n    this.inputNode.setAttribute('autocomplete', 'off');\n    // onPaste functionality\n    this.inputNode.addEventListener('paste', event => {\n      this._onPaste(event);\n    });\n    this.inputNode.addEventListener('blur', event => {\n      this._onBlurInput(event);\n    });\n    // Handler for comma \",\" and Enter keys\n    this.inputNode.addEventListener('keydown', event => {\n      const { keyCode } = event;\n      if (keyCode === _COMMA_KEY || keyCode === _ENTER_KEY) {\n        this._parseInputText(this.inputNode.value);\n      }\n    });\n    // trim comma\n    this.inputNode.addEventListener('keyup', event => {\n      const { value } = this.inputNode;\n      if (event.keyCode === _COMMA_KEY && value[value.length - 1] === ',')\n        this.inputNode.value = value.slice(0, value.length - 1);\n    });\n\n    // Create initial EmailBlocks as DOM elements\n    for (const emailBlock of this.emailBlocks) {\n      this.wrapper.appendChild(emailBlock.wrapper);\n    }\n    this.wrapper.appendChild(this.inputNode);\n    this.wrapper.addEventListener('click', () => {\n      this.inputNode.focus();\n    });\n  }\n\n  getEmails(): string[] {\n    return this.emailBlocks.map(block => block.email);\n  }\n  setEmails(emails: string[]) {\n    this.emailBlocks = [];\n    this.addEmails(emails);\n  }\n  addEmail(email: string) {\n    const emailBlock = new EmailBlock(email, this);\n    this.emailBlocks.push(emailBlock);\n\n    this._appendEmailNode(emailBlock);\n\n    this._onChange();\n  }\n  addEmails(emails: string[]) {\n    const emailBlocks = emails.map(email => new EmailBlock(email, this));\n    if (emails.length === 0) return;\n    this.emailBlocks.push(...emailBlocks);\n\n    for (const emailBlock of emailBlocks) {\n      this._appendEmailNode(emailBlock);\n    }\n\n    this._onChange();\n  }\n\n  removeEmail(email: string) {\n    const index = this.getEmails().indexOf(email);\n    if (index < 0) return;\n\n    this.removeEmailAt(index);\n  }\n  removeEmailAt(position: number) {\n    if (position < 0 || position > this.emailBlocks.length - 1)\n      throw new Error(`Invalid position ${position}`);\n\n    const emailBlock = this.emailBlocks[position];\n    this.emailBlocks.splice(position, 1);\n    this._removeEmailNode(emailBlock);\n\n    this._onChange();\n  }\n  removeEmailBlock(emailBlock: EmailBlock) {\n    const index = this.emailBlocks.indexOf(emailBlock);\n    if (index < 0) return;\n    this.removeEmailAt(index);\n  }\n\n  private _onChange() {\n    if (this.onChange) this.onChange(this.getEmails());\n  }\n\n  // info: https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event\n  // TO-DO: learn how to test this with Jest\n  /* istanbul ignore next */\n  private _onPaste(event: ClipboardEvent) {\n    const clipboardData =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      event.clipboardData || (window as any).clipboardData;\n\n    if (!clipboardData) return;\n    const pastedText = clipboardData.getData('text');\n\n    event.preventDefault();\n\n    this._parseInputText(pastedText);\n  }\n\n  private _onBlurInput(_event: FocusEvent) {\n    this._parseInputText(this.inputNode.value);\n  }\n\n  private _parseInputText(text: string) {\n    const emails = parsePastedText(text);\n    this.addEmails(emails);\n\n    // Reset input\n    this.inputNode.value = '';\n  }\n\n  private _appendEmailNode(emailBlock: EmailBlock) {\n    this.wrapper.insertBefore(emailBlock.wrapper, this.inputNode);\n  }\n\n  private _removeEmailNode(emailBlock: EmailBlock) {\n    this.wrapper.removeChild(emailBlock.wrapper);\n  }\n}\n","import EmailsInput from './EmailsInput';\nimport EmailBlock from './EmailBlock';\nimport { generateRandomEmail } from './utils';\n\nfunction exportGlobals() {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (window as any).EmailsInput = EmailsInput;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (window as any).EmailBlock = EmailBlock;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (window as any).__randomEmail = generateRandomEmail;\n}\n\nif (window) exportGlobals();\n"]}